document.addEventListener("DOMContentLoaded", () => {
  const API = "http://localhost:9999/api/books";
  const booksPerPage = 15;

  let currentPage = 1;
  let allBooks = [];

  // === 1. LOAD DATA ====
  // G·ªçi API ƒë·ªÉ l·∫•y to√†n b·ªô danh s√°ch s√°ch
  async function loadBooks() {
    try {
      const res = await fetch(API);
      allBooks = await res.json();
      renderBooks();
      renderPagination();
    } catch (err) {
      console.error("L·ªói loadBooks:", err);
    }
  }

  // G·ªçi API ƒë·ªÉ l·∫•y danh s√°ch th·ªÉ lo·∫°i v√† hi·ªÉn th·ªã filter radio
  async function loadCategories() {
    try {
      const res = await fetch("http://localhost:9999/api/categories");
      const categories = await res.json();
      const filterContainer = document.getElementById("category-filter");

      categories.forEach((cat) => {
        const label = document.createElement("label");
        label.innerHTML = `
        <input type="radio" name="category" value="${cat._id}"> ${cat.name}
      `;
        filterContainer.appendChild(label);
      });

      // G·∫Øn s·ª± ki·ªán khi ch·ªçn th·ªÉ lo·∫°i
      document.querySelectorAll('input[name="category"]').forEach((radio) => {
        radio.addEventListener("change", applyFilters);
      });
    } catch (err) {
      console.error("L·ªói loadCategories:", err);
    }
  }

  // === 2. RENDER DISPLAY ====
  // Hi·ªÉn th·ªã s√°ch theo trang hi·ªán t·∫°i
  function renderBooks() {
    const list = document.getElementById("book-list");
    list.innerHTML = "";

    const startIndex = (currentPage - 1) * booksPerPage;
    const paginatedBooks = allBooks.slice(
      startIndex,
      startIndex + booksPerPage
    );

    paginatedBooks.forEach((book) => {
      const div = document.createElement("div");
      div.className = "book-item";
      if (book.stock <= 0) div.classList.add("out-of-stock");

      const title = book.title || "Kh√¥ng r√µ ti√™u ƒë·ªÅ";
      const author = book.author || "Kh√¥ng r√µ t√°c gi·∫£";
      const price = book.price?.toLocaleString() || "0";
      const stock = book.stock || 0;
      const coverImage = book.coverImage || "public/SDN.png";

      div.innerHTML = `
      <div class="book-image-wrapper">
        <img class="book-cover" src="${coverImage}" alt="Book Cover" />
        ${book.stock <= 0 ? `<div class="overlay">H·∫øt h√†ng</div>` : ""}
      </div>
      <hr/>
      <a href="/book_detail/${
        book._id
      }" style="text-decoration: none; color: inherit;">
        <strong>${title}</strong><br>
        ‚úçÔ∏è T√°c gi·∫£: ${author}<br>
        üí∞ Gi√°: ${price} VNƒê<br>
        üì¶ S·ªë l∆∞·ª£ng: ${stock} ${stock <= 0 ? "(H·∫øt h√†ng)" : ""}
      </a>
      <button class="add-to-cart-btn" ${book.stock <= 0 ? "disabled" : ""}>
        üõí Th√™m v√†o gi·ªè
      </button>
      <hr>
    `;

      // G·∫Øn s·ª± ki·ªán n·∫øu c√≤n h√†ng
      const btn = div.querySelector(".add-to-cart-btn");
      if (book.stock > 0) {
        btn.addEventListener("click", () => {
          const bookData = {
            _id: book._id,
            title: book.title,
            author: book.author,
            price: book.price,
            stock: book.stock,
          };
          addToCart(bookData);
        });
      }

      list.appendChild(div);
    });
  }

  // Hi·ªÉn th·ªã c√°c n√∫t ph√¢n trang
  function renderPagination() {
    const totalPages = Math.ceil(allBooks.length / booksPerPage);
    const pagination = document.getElementById("pagination");
    pagination.innerHTML = "";

    for (let i = 1; i <= totalPages; i++) {
      const btn = document.createElement("button");
      btn.innerText = i;
      btn.className = i === currentPage ? "active" : "";
      btn.onclick = () => {
        currentPage = i;
        renderBooks();
        renderPagination();
      };
      pagination.appendChild(btn);
    }
  }

  // === 3. CART LOGIC  ====
  function addToCart(book) {
    // Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
    const user = JSON.parse(localStorage.getItem("user"));
    if (!user) {
      alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!");
      window.location.href = "login.html";
      return;
    }

    // N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p, ti·∫øp t·ª•c x·ª≠ l√Ω th√™m v√†o gi·ªè
    let cart = JSON.parse(localStorage.getItem("cart")) || [];
    const existing = cart.find((item) => item._id === book._id);

    if (existing) {
      if (existing.quantity >= book.stock) {
        alert(
          `S·ªë l∆∞·ª£ng "${book.title}" trong gi·ªè ƒë√£ ƒë·∫°t t·ªëi ƒëa (${book.stock}).`
        );
        return;
      }
      existing.quantity += 1;
    } else {
      if (book.stock <= 0) {
        alert(`"${book.title}" hi·ªán ƒëang h·∫øt h√†ng.`);
        return;
      }
      cart.push({ ...book, quantity: 1 });
    }

    localStorage.setItem("cart", JSON.stringify(cart));
    alert(`ƒê√£ th√™m "${book.title}" v√†o gi·ªè h√†ng!`);
  }

  // === 4. FILTER, SEARCH, SORT  ====
  // H√†m ch√≠nh ƒë·ªÉ l·ªçc + t√¨m ki·∫øm + s·∫Øp x·∫øp
  async function applyFilters() {
    try {
      const res = await fetch(API);
      let filteredBooks = await res.json();

      const keyword = document.getElementById("search").value.toLowerCase();
      const selectedSort = document.querySelector(
        'input[name="sort"]:checked'
      ).value;
      const selectedCategory = document.querySelector(
        'input[name="category"]:checked'
      ).value;

      // L·ªçc theo t·ª´ kh√≥a
      filteredBooks = filteredBooks.filter(
        (book) =>
          book.title.toLowerCase().includes(keyword) ||
          (book.author || "").toLowerCase().includes(keyword)
      );

      // L·ªçc theo th·ªÉ lo·∫°i
      if (selectedCategory) {
        filteredBooks = filteredBooks.filter(
          (book) =>
            book.category?._id === selectedCategory ||
            book.category === selectedCategory
        );
      }

      // S·∫Øp x·∫øp
      switch (selectedSort) {
        case "price":
          filteredBooks.sort((a, b) => a.price - b.price);
          break;
        case "price-desc":
          filteredBooks.sort((a, b) => b.price - a.price);
          break;
      }

      allBooks = filteredBooks;
      currentPage = 1;
      renderBooks();
      renderPagination();
    } catch (err) {
      console.error("L·ªói applyFilters:", err);
    }
  }

  // G·∫Øn s·ª± ki·ªán khi nh·∫≠p t√¨m ki·∫øm (realtime)
  document.getElementById("search").addEventListener("input", applyFilters);

  // G·∫Øn s·ª± ki·ªán khi ch·ªçn s·∫Øp x·∫øp
  document.querySelectorAll('input[name="sort"]').forEach((radio) => {
    radio.addEventListener("change", applyFilters);
  });

  loadBooks();
  loadCategories();
});
